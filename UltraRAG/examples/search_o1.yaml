# Search-o1 demo

# MCP Servers
servers:
  benchmark: servers/benchmark
  generation: servers/generation
  retriever: servers/retriever
  prompt: servers/prompt
  evaluation: servers/evaluation
  router: servers/router
  custom: servers/custom

pipeline:
# 1. 加载数据集
- benchmark.get_data
# 2. 初始化 (构造 instruction + 问题)
- prompt.search_o1_init
# 3. 首轮初始生成 (得到初始 reasoning / 可能的第一个 <SEARCH_QUERY>)
- generation.generate
# 4. 循环：多轮搜索 + 推理
- loop:
    times: 3
    steps:
    - branch:
        router:
        - router.search_o1_check # 输出 e.g. status=incomplete/complete
        branches:
          retrieve:
          # 4.1 抽取最新需要执行的查询（若没有则在 need_search_check 中应返回 complete）
          - custom.search_o1_query_extract
          # 4.3 执行检索 (将抽取的 query 列表传入)
          - retriever.retriever_deploy_search:
              input:
                query_list: extract_query_list
          # 4.4 reasoning_indocument
          - prompt.searcho1_reasoning_indocument
          - generation.generate
          # 4.5 追加 <BEGIN_SEARCH_RESULT> …）
          - prompt.search_o1_insert
          # 4.6 生成新一轮 reasoning / 可能新的查询
          - generation.generate
          stop: []
# 5. 评估 (使用最终答案 / reasoning)
- evaluation.evaluate:
    input:
      pred_ls: ans_ls
